# otg_authn_002_tester.py
# OTG-AUTHN-002: Testing for Default Credentials
# OSCP-Style Vulnerability Tester for DVWA (localhost XAMPP)
# Generated by AI Security Assistant

import requests
import datetime
from bs4 import BeautifulSoup
import urllib3

# Disable SSL warnings for localhost
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === CONFIGURATION ===
TARGET_URL = "http://localhost/dvwa/login.php"
LOGIN_ACTION = "http://localhost/dvwa/login.php"
USER_AGENT = "OTG-AUTHN-002 Tester v1.0"

# Default credentials to test
default_creds = [
    ("admin", "password"),
    ("admin", "admin"),
    ("admin", "123456"),
    ("guest", "guest"),
    ("user", "user"),
    ("test", "test"),
    ("admin", ""),
    ("", ""),
    ("dvwa", "dvwa")
]

# Headers
headers = {
    'User-Agent': USER_AGENT,
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Connection': 'close'
}

def banner():
    print(r"""
    =====================================================
     OTG-AUTHN-002 - Testing for Default Credentials
             OSCP-Style Security Assessment
    =====================================================
    """)

def test_connection():
    try:
        resp = requests.get(TARGET_URL, headers=headers, timeout=10, verify=False)
        if resp.status_code == 200:
            return True, resp
        else:
            return False, resp.status_code
    except requests.exceptions.RequestException as e:
        return False, str(e)

def extract_csrf_token(response):
    soup = BeautifulSoup(response.text, 'html.parser')
    token_elem = soup.find('input', {'name': 'user_token'})
    if token_elem:
        return token_elem['value']
    return None

def attempt_login(session, username, password):
    try:
        # Get login page to extract CSRF token
        resp = session.get(TARGET_URL, headers=headers, verify=False, timeout=10)
        if resp.status_code != 200:
            return False, "Failed to load login page"

        # Extract CSRF token
        csrf_token = extract_csrf_token(resp)
        
        # Prepare login data
        data = {
            'username': username,
            'password': password,
            'Login': 'Login'
        }
        if csrf_token:
            data['user_token'] = csrf_token

        # Submit login
        login_resp = session.post(LOGIN_ACTION, data=data, headers=headers, allow_redirects=True, verify=False)
        
        # Check for successful login
        if "index.php" in login_resp.url and "Welcome" in login_resp.text:
            return True, login_resp
        elif "Login failed" in login_resp.text:
            return False, login_resp
        else:
            # Additional check for redirect to index
            if "index.php" in login_resp.url:
                return True, login_resp
            return False, login_resp

    except requests.exceptions.RequestException as e:
        return False, str(e)

def generate_html_report(result, findings, poc, recommendations):
    report_name = "OTG-AUTHN-002_Report.html"
    date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    status_color = "#cc0000" if "Failed" in result else "#008800"

    html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OTG-AUTHN-002 Security Assessment Report</title>
    <style>
        body {{
            font-family: 'Courier New', monospace;
            background-color: #f4f4f4;
            color: #000;
            margin: 0;
            padding: 20px;
        }}
        .container {{
            max-width: 900px;
            margin: auto;
            background: white;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        header {{
            background-color: #003366;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.4em;
            margin: -20px -20px 20px -20px;
        }}
        h1, h2, h3 {{
            color: #003366;
            border-bottom: 1px solid #003366;
            padding-bottom: 5px;
        }}
        .field {{
            margin-bottom: 10px;
        }}
        .label {{
            font-weight: bold;
            display: inline-block;
            width: 180px;
        }}
        .value {{
            display: inline;
        }}
        .status {{
            color: {status_color};
            font-weight: bold;
        }}
        pre {{
            background: #f0f0f0;
            padding: 10px;
            border: 1px solid #ccc;
            overflow: auto;
            font-size: 0.9em;
        }}
        footer {{
            margin-top: 30px;
            text-align: center;
            font-size: 0.9em;
            color: #555;
            border-top: 1px solid #ccc;
            padding-top: 10px;
        }}
        .risk {{
            font-weight: bold;
            color: #cc0000;
        }}
        .success {{
            color: #008800;
            font-weight: bold;
        }}
        .failed {{
            color: #cc0000;
            font-weight: bold;
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            OWASP Web Security Testing Guide - OTG-AUTHN-002
        </header>

        <h1>OTG-AUTHN-002: Testing for Default Credentials</h1>

        <div class="field"><span class="label">Test Date:</span> <span class="value">{date_str}</span></div>
        <div class="field"><span class="label">Target URL:</span> <span class="value">{TARGET_URL}</span></div>
        <div class="field"><span class="label">Test Result:</span> <span class="value status">{result}</span></div>

        <h2>Vulnerability Description</h2>
        <p>
            Many applications and devices are shipped with default usernames and passwords that are well-known 
            or easily guessable. If these default credentials are not changed during deployment, attackers 
            can gain unauthorized access to the system.
        </p>
        <p>
            This test attempts to authenticate using a list of common default credentials to determine 
            if any of them are still active on the target application.
        </p>

        <h2>Impact</h2>
        <p class="risk">Medium</p>
        <p>
            Successful exploitation of default credentials can lead to full compromise of the application, 
            unauthorized access to sensitive data, and potential lateral movement within the network. 
            It represents a critical security misconfiguration.
        </p>

        <h2>Test Findings</h2>
        <pre>{findings}</pre>

        <h2>Proof of Concept (PoC)</h2>
        <p>The following request demonstrates successful authentication with default credentials:</p>
        <pre><code>{poc}</code></pre>

        <h2>Remediation / Recommendations</h2>
        <p>{recommendations}</p>

        <h2>References</h2>
        <ul>
            <li><a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authentication_Testing/02-Testing_for_Default_Credentials" target="_blank">
                OWASP WSTG - OTG-AUTHN-002</a></li>
            <li><a href="https://csrc.nist.gov/publications/detail/sp/800-123/final" target="_blank">
                NIST SP 800-123: Guide to General Server Security</a></li>
            <li>Change all default passwords during initial setup.</li>
            <li>Implement account lockout mechanisms after failed login attempts.</li>
            <li>Disable or rename default accounts that are not required.</li>
            <li>Enforce strong password policies for all user accounts.</li>
        </ul>

        <footer>
            OSCP-Style Security Assessment Report | Generated by OTG-AUTHN-002 Tester
        </footer>
    </div>
</body>
</html>
    """

    with open(report_name, 'w', encoding='utf-8') as f:
        f.write(html_content)

    print(f"[+] Report generated: {report_name}")

def main():
    banner()

    print("[+] Starting OTG-AUTHN-002 test...")
    
    # Test connectivity
    print("[✓] Testing connectivity to target...")
    connected, resp_or_err = test_connection()
    if not connected:
        print(f"[-] Failed to connect to {TARGET_URL}")
        print(f"Error: {resp_or_err}")
        return

    print(f"[✓] Connected to {TARGET_URL}")

    # Initialize session
    session = requests.Session()
    
    # Track results
    valid_creds_found = False
    valid_username = ""
    valid_password = ""
    attempted_creds = []
    
    # Test each credential pair
    for username, password in default_creds:
        print(f"[→] Trying: {username}:{password}")
        attempted_creds.append(f"{username}:{password}")
        
        success, response = attempt_login(session, username, password)
        
        if success:
            print(f"[!] SUCCESS: Valid credentials found: {username}:{password}")
            valid_creds_found = True
            valid_username = username
            valid_password = password
            break
        else:
            continue

    # Determine result and generate report
    if valid_creds_found:
        result = "Failed"
        findings = f"Default credentials were found to be active on the system.\n\n"
        findings += f"Valid Credentials: {valid_username}:{valid_password}\n"
        findings += f"\nAttempted Credentials:\n"
        for cred in attempted_creds:
            status = "✓ SUCCESS" if cred == f"{valid_username}:{valid_password}" else "✗ FAILED"
            findings += f"  {cred} - {status}\n"
        
        # Generate PoC
        csrf_token = ""
        if hasattr(response, 'text'):
            csrf_token = extract_csrf_token(response) or ""
        
        csrf_str = f" -d \"user_token={csrf_token}\"" if csrf_token else ""
        poc = f'''curl -X POST "{LOGIN_ACTION}" \\
  -H "Content-Type: application/x-www-form-urlencoded" \\
  -d "username={valid_username}" \\
  -d "password={valid_password}" \\
  -d "Login=Login"{csrf_str}'''
        
        recommendations = """
1. Immediately change all default passwords to strong, unique credentials.
2. Disable or rename default accounts that are not actively used.
3. Implement account lockout policies to prevent brute-force attacks.
4. Enforce strong password policies including minimum length, complexity, and regular rotation.
5. Regularly audit user accounts and remove unused or unnecessary default accounts.
6. Educate administrators about the importance of changing default credentials during deployment.
"""
    else:
        result = "Passed"
        findings = "No default credentials were found to be active.\n\n"
        findings += "Attempted Credentials:\n"
        for cred in attempted_creds:
            findings += f"  {cred} - FAILED\n"
        
        poc = "No valid default credentials found."
        recommendations = """
The application does not appear to be using default credentials. However, continue to:
1. Regularly audit user accounts for weak or default passwords.
2. Implement strong authentication mechanisms such as multi-factor authentication (MFA).
3. Enforce password complexity and expiration policies.
4. Monitor authentication logs for suspicious activity.
"""

    generate_html_report(result, findings, poc, recommendations)
    print("[+] Test completed.")

if __name__ == "__main__":
    main()