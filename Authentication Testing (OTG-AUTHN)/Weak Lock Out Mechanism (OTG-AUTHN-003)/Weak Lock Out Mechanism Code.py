# otg_authn_003_tester.py
# OTG-AUTHN-003: Testing for Weak Lock Out Mechanism
# OSCP-Style Vulnerability Tester for DVWA (localhost XAMPP)
# Generated by AI Security Assistant

import requests
import datetime
import time
from bs4 import BeautifulSoup
import urllib3

# Disable SSL warnings for localhost
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === CONFIGURATION ===
TARGET_URL = "http://localhost/dvwa/login.php"
LOGIN_ACTION = "http://localhost/dvwa/login.php"
TEST_USERNAME = "admin"
WRONG_PASSWORD = "wrongpass"
MAX_ATTEMPTS = 30
DELAY_BETWEEN_ATTEMPTS = 0.5  # seconds
USER_AGENT = "OTG-AUTHN-003 Tester v1.0"

# Headers
headers = {
    'User-Agent': USER_AGENT,
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Connection': 'close'
}

def banner():
    print(r"""
    =====================================================
     OTG-AUTHN-003 - Testing for Weak Lock Out Mechanism
             OSCP-Style Security Assessment
    =====================================================
    """)

def test_connection():
    try:
        resp = requests.get(TARGET_URL, headers=headers, timeout=10, verify=False)
        if resp.status_code == 200:
            return True, resp
        else:
            return False, resp.status_code
    except requests.exceptions.RequestException as e:
        return False, str(e)

def extract_csrf_token(response):
    soup = BeautifulSoup(response.text, 'html.parser')
    token_elem = soup.find('input', {'name': 'user_token'})
    if token_elem:
        return token_elem['value']
    return None

def attempt_login(session, username, password):
    try:
        # Get login page to extract CSRF token
        resp = session.get(TARGET_URL, headers=headers, verify=False, timeout=10)
        if resp.status_code != 200:
            return False, "Failed to load login page", 0

        # Extract CSRF token
        csrf_token = extract_csrf_token(resp)
        
        # Prepare login data
        data = {
            'username': username,
            'password': password,
            'Login': 'Login'
        }
        if csrf_token:
            data['user_token'] = csrf_token

        # Submit login
        start_time = time.time()
        login_resp = session.post(LOGIN_ACTION, data=data, headers=headers, allow_redirects=True, verify=False)
        end_time = time.time()
        
        response_time = end_time - start_time
        
        # Check for lockout indicators
        lockout_indicators = [
            "too many login attempts",
            "account locked",
            "locked out",
            "try again later",
            "rate limit",
            "temporarily blocked"
        ]
        
        locked_out = any(indicator in login_resp.text.lower() for indicator in lockout_indicators)
        
        # Check if we're still on login page (failed login)
        login_failed = "login failed" in login_resp.text.lower() or "index.php" not in login_resp.url
        
        return locked_out, login_resp, response_time, login_failed

    except requests.exceptions.RequestException as e:
        return False, str(e), 0, True

def analyze_lockout_behavior(attempts_data):
    """Analyze the collected attempt data to determine lockout behavior"""
    
    # Check for lockout
    lockout_detected = False
    lockout_attempt = None
    lockout_message = ""
    
    for i, (attempt_num, locked_out, response, response_time, login_failed) in enumerate(attempts_data):
        if locked_out:
            lockout_detected = True
            lockout_attempt = attempt_num
            if hasattr(response, 'text'):
                lockout_message = response.text[:200] + "..." if len(response.text) > 200 else response.text
            break
    
    # Check for increasing response times (possible rate limiting)
    response_times = [data[3] for data in attempts_data if isinstance(data[3], (int, float))]
    increasing_times = False
    if len(response_times) > 5:
        # Check if last few responses are significantly slower
        avg_first_five = sum(response_times[:5]) / 5
        avg_last_five = sum(response_times[-5:]) / 5
        if avg_last_five > avg_first_five * 2:
            increasing_times = True
    
    return {
        'lockout_detected': lockout_detected,
        'lockout_attempt': lockout_attempt,
        'lockout_message': lockout_message,
        'increasing_times': increasing_times,
        'total_attempts': len(attempts_data)
    }

def generate_html_report(result, findings, poc, recommendations):
    report_name = "OTG-AUTHN-003_Report.html"
    date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    status_color = "#cc0000" if "Failed" in result else "#008800"

    html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OTG-AUTHN-003 Security Assessment Report</title>
    <style>
        body {{
            font-family: 'Courier New', monospace;
            background-color: #f4f4f4;
            color: #000;
            margin: 0;
            padding: 20px;
        }}
        .container {{
            max-width: 900px;
            margin: auto;
            background: white;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        header {{
            background-color: #003366;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.4em;
            margin: -20px -20px 20px -20px;
        }}
        h1, h2, h3 {{
            color: #003366;
            border-bottom: 1px solid #003366;
            padding-bottom: 5px;
        }}
        .field {{
            margin-bottom: 10px;
        }}
        .label {{
            font-weight: bold;
            display: inline-block;
            width: 200px;
        }}
        .value {{
            display: inline;
        }}
        .status {{
            color: {status_color};
            font-weight: bold;
        }}
        pre {{
            background: #f0f0f0;
            padding: 10px;
            border: 1px solid #ccc;
            overflow: auto;
            font-size: 0.9em;
        }}
        footer {{
            margin-top: 30px;
            text-align: center;
            font-size: 0.9em;
            color: #555;
            border-top: 1px solid #ccc;
            padding-top: 10px;
        }}
        .risk {{
            font-weight: bold;
            color: #cc0000;
        }}
        .success {{
            color: #008800;
            font-weight: bold;
        }}
        .failed {{
            color: #cc0000;
            font-weight: bold;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            OWASP Web Security Testing Guide - OTG-AUTHN-003
        </header>

        <h1>OTG-AUTHN-003: Testing for Weak Lock Out Mechanism</h1>

        <div class="field"><span class="label">Test Date:</span> <span class="value">{date_str}</span></div>
        <div class="field"><span class="label">Target URL:</span> <span class="value">{TARGET_URL}</span></div>
        <div class="field"><span class="label">Test Result:</span> <span class="value status">{result}</span></div>

        <h2>Vulnerability Description</h2>
        <p>
            A weak lockout mechanism allows attackers to perform brute-force attacks by repeatedly attempting 
            to guess user credentials without facing account lockout or significant delays. A strong lockout 
            mechanism should temporarily or permanently lock an account after a certain number of failed login 
            attempts to prevent unauthorized access.
        </p>
        <p>
            This test evaluates whether the application implements an effective account lockout mechanism by 
            simulating multiple failed login attempts and analyzing the application's response.
        </p>

        <h2>Impact</h2>
        <p class="risk">Medium</p>
        <p>
            Without a proper lockout mechanism, attackers can use brute-force or dictionary attacks to guess 
            user passwords, potentially gaining unauthorized access to accounts. This can lead to data breaches, 
            privilege escalation, and compromise of the entire application.
        </p>

        <h2>Test Findings</h2>
        <pre>{findings}</pre>

        <h2>Proof of Concept (PoC)</h2>
        <p>The following script demonstrates the weak lockout behavior:</p>
        <pre><code>{poc}</code></pre>

        <h2>Remediation / Recommendations</h2>
        <p>{recommendations}</p>

        <h2>References</h2>
        <ul>
            <li><a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism" target="_blank">
                OWASP WSTG - OTG-AUTHN-003</a></li>
            <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html" target="_blank">
                OWASP Authentication Cheat Sheet</a></li>
            <li>NIST SP 800-63B: Digital Identity Guidelines - Authentication and Lifecycle Management</li>
            <li>Implement account lockout after 5-10 failed attempts.</li>
            <li>Use incremental delays instead of permanent lockouts where possible.</li>
            <li>Consider IP-based rate limiting as an additional layer of protection.</li>
            <li>Provide clear feedback to users without revealing account existence.</li>
        </ul>

        <footer>
            OSCP-Style Security Assessment Report | Generated by OTG-AUTHN-003 Tester
        </footer>
    </div>
</body>
</html>
    """

    with open(report_name, 'w', encoding='utf-8') as f:
        f.write(html_content)

    print(f"[+] Report generated: {report_name}")

def main():
    banner()

    print("[+] Starting OTG-AUTHN-003 test...")
    
    # Test connectivity
    print("[✓] Testing connectivity to target...")
    connected, resp_or_err = test_connection()
    if not connected:
        print(f"[-] Failed to connect to {TARGET_URL}")
        print(f"Error: {resp_or_err}")
        return

    print(f"[✓] Connected to {TARGET_URL}")

    # Initialize session
    session = requests.Session()
    
    # Track attempts
    attempts_data = []
    lockout_detected = False
    lockout_attempt = None
    
    print(f"[→] Performing up to {MAX_ATTEMPTS} failed login attempts...")
    
    for attempt in range(1, MAX_ATTEMPTS + 1):
        print(f"[→] Attempt {attempt}/{MAX_ATTEMPTS}: Failed login ({TEST_USERNAME}:{WRONG_PASSWORD})")
        
        locked_out, response, response_time, login_failed = attempt_login(session, TEST_USERNAME, WRONG_PASSWORD)
        
        # Store attempt data
        attempts_data.append((attempt, locked_out, response, response_time, login_failed))
        
        # Check for lockout
        if locked_out:
            lockout_detected = True
            lockout_attempt = attempt
            print(f"[!] Lockout detected at attempt {attempt}")
            break
        
        # Delay between attempts
        time.sleep(DELAY_BETWEEN_ATTEMPTS)
    
    # Analyze results
    analysis = analyze_lockout_behavior(attempts_data)
    
    # Generate findings
    if lockout_detected:
        result = "Passed"
        findings = f"Account lockout mechanism detected.\n\n"
        findings += f"Lockout occurred after {lockout_attempt} failed attempts.\n"
        findings += f"Lockout message: {analysis['lockout_message'][:100]}...\n"
        findings += f"\nTotal attempts made: {analysis['total_attempts']}\n"
        
        poc = f'''#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup

session = requests.Session()
target = "{TARGET_URL}"

for i in range(1, {lockout_attempt + 1}):
    # Get CSRF token
    resp = session.get(target)
    soup = BeautifulSoup(resp.text, 'html.parser')
    token = soup.find('input', {{'name': 'user_token'}})['value']
    
    # Attempt login
    data = {{
        'username': '{TEST_USERNAME}',
        'password': '{WRONG_PASSWORD}',
        'Login': 'Login',
        'user_token': token
    }}
    login_resp = session.post("{LOGIN_ACTION}", data=data)
    
    if "too many login attempts" in login_resp.text.lower():
        print(f"Lockout detected at attempt {{i}}")
        break'''
        
        recommendations = """
The application implements an account lockout mechanism, which is good security practice. To further strengthen it:

1. Ensure lockout thresholds are appropriate (typically 5-10 attempts).
2. Implement incremental delays (e.g., 1 minute, then 5, then 15) rather than permanent lockouts.
3. Consider IP-based rate limiting as an additional protection layer.
4. Log all lockout events for security monitoring.
5. Provide a secure account recovery mechanism for legitimate users.
6. Monitor for distributed brute-force attacks across multiple accounts.
"""
    else:
        result = "Failed"
        findings = "No effective account lockout mechanism detected.\n\n"
        findings += f"The application allowed {MAX_ATTEMPTS} consecutive failed login attempts without locking the account.\n"
        
        if analysis['increasing_times']:
            findings += "Note: Response times increased towards the end, suggesting possible rate limiting.\n"
        
        findings += f"\nTotal attempts made: {analysis['total_attempts']}\n"
        findings += "This makes the application vulnerable to brute-force attacks.\n"
        
        poc = f'''#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup

session = requests.Session()
target = "{TARGET_URL}"

# Perform {MAX_ATTEMPTS} failed login attempts
for i in range(1, {MAX_ATTEMPTS + 1}):
    # Get CSRF token
    resp = session.get(target)
    soup = BeautifulSoup(resp.text, 'html.parser')
    token = soup.find('input', {{'name': 'user_token'}})['value']
    
    # Attempt login with wrong password
    data = {{
        'username': '{TEST_USERNAME}',
        'password': '{WRONG_PASSWORD}',
        'Login': 'Login',
        'user_token': token
    }}
    login_resp = session.post("{LOGIN_ACTION}", data=data)
    
    print(f"Attempt {{i}}: Login failed - Status: {{login_resp.status_code}}")
    
print("All {MAX_ATTEMPTS} attempts completed without account lockout.")'''
        
        recommendations = """
The application lacks an effective account lockout mechanism, making it vulnerable to brute-force attacks. 
Implement the following security measures:

1. Enforce account lockout after 5-10 failed login attempts.
2. Implement temporary lockouts (e.g., 15-30 minutes) rather than permanent locks.
3. Use incremental delays between login attempts (exponential backoff).
4. Consider IP-based rate limiting to prevent distributed attacks.
5. Implement CAPTCHA after a few failed attempts.
6. Log all failed login attempts for security monitoring.
7. Alert administrators of suspicious login patterns.
8. Provide secure account recovery options for locked users.
"""

    generate_html_report(result, findings, poc, recommendations)
    print("[+] Test completed.")

if __name__ == "__main__":
    main()