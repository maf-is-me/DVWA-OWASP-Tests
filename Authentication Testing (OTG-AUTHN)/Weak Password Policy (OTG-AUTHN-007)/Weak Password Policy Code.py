# otg_authn_007_tester.py
# OTG-AUTHN-007: Testing for Weak Password Policy
# OSCP-Style Vulnerability Tester for DVWA (localhost XAMPP)
# Generated by AI Security Assistant - CORRECTED VERSION

import requests
import datetime
from bs4 import BeautifulSoup
import urllib3

# Disable SSL warnings for localhost
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === CONFIGURATION ===
BASE_URL = "http://localhost/dvwa"
LOGIN_URL = f"{BASE_URL}/login.php"
CSRF_URL = f"{BASE_URL}/vulnerabilities/csrf/"
USER_AGENT = "OTG-AUTHN-007 Tester v1.0"
USERNAME = "admin"
PASSWORD = "password"

# Test passwords
test_passwords = [
    # Length tests
    ("a", "1 character"),
    ("123", "3 characters"),
    ("pass", "4 characters"),
    ("12345", "5 characters"),
    ("123456", "6 characters"),
    
    # Complexity tests
    ("password", "No complexity - lowercase only"),
    ("PASSWORD", "No complexity - uppercase only"),
    ("12345678", "No complexity - numbers only"),
    ("password123", "Missing uppercase and special chars"),
    
    # Common weak passwords
    ("admin", "Common password"),
    ("letmein", "Common password"),
    ("welcome", "Common password"),
    
    # Valid strong password for reset at the end
    ("StrongPass123!", "Strong password")
]

# Headers
headers = {
    'User-Agent': USER_AGENT,
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.9',
    'Accept-Language': 'en-US,en;q=0.5',
    'Connection': 'close'
}

def banner():
    print(r"""
    =====================================================
     OTG-AUTHN-007 - Testing for Weak Password Policy
             OSCP-Style Security Assessment
    =====================================================
    """)

def test_connection():
    try:
        resp = requests.get(LOGIN_URL, headers=headers, timeout=10, verify=False)
        if resp.status_code == 200:
            return True, resp
        else:
            return False, resp.status_code
    except requests.exceptions.RequestException as e:
        return False, str(e)

def extract_csrf_token(response):
    soup = BeautifulSoup(response.text, 'html.parser')
    token_elem = soup.find('input', {'name': 'user_token'})
    if token_elem:
        return token_elem['value']
    return None

def login(session):
    """Login to DVWA"""
    try:
        # Get login page
        resp = session.get(LOGIN_URL, headers=headers, verify=False, timeout=10)
        csrf_token = extract_csrf_token(resp)
        
        # Login
        data = {
            'username': USERNAME,
            'password': PASSWORD,
            'Login': 'Login'
        }
        if csrf_token:
            data['user_token'] = csrf_token
            
        login_resp = session.post(LOGIN_URL, data=data, headers=headers, verify=False)
        
        if "index.php" in login_resp.url:
            return True, login_resp
        else:
            return False, "Login failed"
    except Exception as e:
        return False, str(e)

def test_password_change(session, password):
    """Test actual password change with given password"""
    try:
        # Get CSRF page to understand current form
        csrf_resp = session.get(CSRF_URL, headers=headers, verify=False, timeout=10)
        
        # Submit password change request using GET parameters (as shown in DVWA form)
        # The form uses GET method with action="#"
        change_url = f"{CSRF_URL}?password_new={password}&password_conf={password}&Change=Change"
        
        change_resp = session.get(change_url, headers=headers, verify=False, timeout=10)
        
        return True, change_resp
        
    except Exception as e:
        return False, str(e)

def restore_password(session, original_password):
    """Restore original password"""
    try:
        change_url = f"{CSRF_URL}?password_new={original_password}&password_conf={original_password}&Change=Change"
        session.get(change_url, headers=headers, verify=False, timeout=10)
        return True
    except:
        return False

def analyze_password_strength(password):
    """Analyze password strength"""
    issues = []
    
    # Length check
    if len(password) < 8:
        issues.append("Too short (less than 8 characters)")
    
    # Character variety
    has_upper = any(c.isupper() for c in password)
    has_lower = any(c.islower() for c in password)
    has_digit = any(c.isdigit() for c in password)
    has_special = any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)
    
    if not has_upper:
        issues.append("Missing uppercase letters")
    if not has_lower:
        issues.append("Missing lowercase letters")
    if not has_digit:
        issues.append("Missing numbers")
    if not has_special:
        issues.append("Missing special characters")
    
    # Common weak passwords
    common_passwords = ["password", "123456", "admin", "letmein", "welcome", "qwerty"]
    if password.lower() in common_passwords:
        issues.append("Commonly used weak password")
    
    return issues

def test_real_password_policy():
    """Test actual password policy by attempting real password changes"""
    print("[→] Testing actual password policy enforcement...")
    
    results = []
    session = requests.Session()
    
    # Login first
    print("[✓] Logging in...")
    success, result = login(session)
    if not success:
        results.append({
            'password': 'N/A',
            'description': 'Login failed',
            'accepted': False,
            'error': str(result)
        })
        return results
    
    # Save original password for restoration
    original_password = PASSWORD
    
    # Test each password
    for password, description in test_passwords:
        print(f"[→] Testing password: '{password}' ({description})")
        
        # Test password change
        success, response = test_password_change(session, password)
        
        if success and response:
            # Check if password change was successful
            if "password changed" in response.text.lower():
                # Password was accepted
                issues = analyze_password_strength(password)
                results.append({
                    'password': password,
                    'description': description,
                    'length': len(password),
                    'accepted': True,
                    'issues': issues
                })
                print(f"    [!] ACCEPTED - Weak password allowed")
            else:
                # Password was rejected
                issues = analyze_password_strength(password)
                results.append({
                    'password': password,
                    'description': description,
                    'length': len(password),
                    'accepted': False,
                    'issues': issues
                })
                print(f"    [✓] REJECTED - Weak password blocked")
        else:
            # Test failed
            issues = analyze_password_strength(password)
            results.append({
                'password': password,
                'description': description,
                'length': len(password),
                'accepted': False,
                'issues': issues,
                'error': str(response) if response else "Unknown error"
            })
            print(f"    [!] ERROR - Test failed")
    
    # Restore original password
    print("[→] Restoring original password...")
    restore_password(session, original_password)
    
    return results

def generate_html_report(result, findings, poc, recommendations):
    report_name = "OTG-AUTHN-007_Report.html"
    date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    status_color = "#cc0000" if "Failed" in result else "#008800"

    html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OTG-AUTHN-007 Security Assessment Report</title>
    <style>
        body {{
            font-family: 'Courier New', monospace;
            background-color: #f4f4f4;
            color: #000;
            margin: 0;
            padding: 20px;
        }}
        .container {{
            max-width: 900px;
            margin: auto;
            background: white;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        header {{
            background-color: #003366;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.4em;
            margin: -20px -20px 20px -20px;
        }}
        h1, h2, h3 {{
            color: #003366;
            border-bottom: 1px solid #003366;
            padding-bottom: 5px;
        }}
        .field {{
            margin-bottom: 10px;
        }}
        .label {{
            font-weight: bold;
            display: inline-block;
            width: 200px;
        }}
        .value {{
            display: inline;
        }}
        .status {{
            color: {status_color};
            font-weight: bold;
        }}
        pre {{
            background: #f0f0f0;
            padding: 10px;
            border: 1px solid #ccc;
            overflow: auto;
            font-size: 0.9em;
        }}
        footer {{
            margin-top: 30px;
            text-align: center;
            font-size: 0.9em;
            color: #555;
            border-top: 1px solid #ccc;
            padding-top: 10px;
        }}
        .risk {{
            font-weight: bold;
            color: #cc0000;
        }}
        .success {{
            color: #008800;
            font-weight: bold;
        }}
        .failed {{
            color: #cc0000;
            font-weight: bold;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        .vulnerable {{
            background-color: #ffe6e6;
        }}
        .secure {{
            background-color: #e6ffe6;
        }}
        .weak {{
            color: #cc0000;
            font-weight: bold;
        }}
        .strong {{
            color: #008800;
            font-weight: bold;
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            OWASP Web Security Testing Guide - OTG-AUTHN-007
        </header>

        <h1>OTG-AUTHN-007: Testing for Weak Password Policy</h1>

        <div class="field"><span class="label">Test Date:</span> <span class="value">{date_str}</span></div>
        <div class="field"><span class="label">Target URL:</span> <span class="value">{BASE_URL}</span></div>
        <div class="field"><span class="label">Test Result:</span> <span class="value status">{result}</span></div>

        <h2>Vulnerability Description</h2>
        <p>
            A weak password policy allows users to set easily guessable or compromised passwords, 
            increasing the risk of account takeover through brute-force attacks, dictionary attacks, 
            or credential stuffing. Strong password policies are essential for maintaining 
            authentication security.
        </p>
        <p>
            This test evaluates whether DVWA enforces appropriate password requirements by 
            testing the actual password change functionality in the CSRF vulnerability page.
        </p>

        <h2>Impact</h2>
        <p class="risk">Medium</p>
        <p>
            Weak password policies significantly increase the likelihood of successful password-based 
            attacks, leading to unauthorized access to user accounts and potential data breaches. 
            This can result in identity theft, financial loss, and reputational damage.
        </p>

        <h2>Test Findings</h2>
        <pre>{findings}</pre>

        <h2>Proof of Concept (PoC)</h2>
        <p>The following examples demonstrate weak password acceptance:</p>
        <pre><code>{poc}</code></pre>

        <h2>Remediation / Recommendations</h2>
        <p>{recommendations}</p>

        <h2>References</h2>
        <ul>
            <li><a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authentication_Testing/07-Testing_for_Weak_Password_Policy" target="_blank">
                OWASP WSTG - OTG-AUTHN-007</a></li>
            <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#password-requirements" target="_blank">
                OWASP Authentication Cheat Sheet - Password Requirements</a></li>
            <li><a href="https://pages.nist.gov/800-63-3/sp800-63b.html" target="_blank">
                NIST SP 800-63B - Digital Identity Guidelines</a></li>
            <li><a href="https://owasp.org/www-project-top-ten/2017/A02_2017-Broken_Authentication" target="_blank">
                OWASP Top 10 - A02:2017 Broken Authentication</a></li>
            <li>Enforce minimum 8-character passwords</li>
            <li>Require 3 of 4 character types: uppercase, lowercase, number, special character</li>
            <li>Block common passwords using deny lists</li>
            <li>Implement password history (last 4-5 passwords)</li>
            <li>Enforce rotation every 60-90 days</li>
        </ul>

        <footer>
            OSCP-Style Security Assessment Report | Generated by OTG-AUTHN-007 Tester
        </footer>
    </div>
</body>
</html>
    """

    with open(report_name, 'w', encoding='utf-8') as f:
        f.write(html_content)

    print(f"[+] Report generated: {report_name}")

def main():
    banner()

    print("[+] Starting OTG-AUTHN-007 test...")
    
    # Test connectivity
    print("[✓] Testing connectivity to target...")
    connected, resp_or_err = test_connection()
    if not connected:
        print(f"[-] Failed to connect to {LOGIN_URL}")
        print(f"Error: {resp_or_err}")
        return

    print(f"[✓] Connected to {LOGIN_URL}")

    # Test actual password policy
    test_results = test_real_password_policy()
    
    # Analyze results
    findings_text = ""
    weak_passwords = []
    poc_examples = []
    
    # Add test results
    findings_text += "Password Policy Test Results:\n"
    findings_text += "+----------------+----------------------+--------+----------------------+----------------------+\n"
    findings_text += "| Password       | Description          | Length | Issues               | Status               |\n"
    findings_text += "+----------------+----------------------+--------+----------------------+----------------------+\n"
    
    for result in test_results:
        if 'error' in result:
            findings_text += f"| ERROR          | {result.get('description', 'N/A'):<20} | N/A    | Error                | FAILED               |\n"
            continue
            
        password = result['password']
        desc = result['description']
        length = result['length']
        issues = result['issues']
        accepted = result['accepted']
        status = "ACCEPTED" if accepted else "REJECTED"
        
        findings_text += f"| {password:<14} | {desc:<20} | {length:<6} | {len(issues):<20} | {status:<20} |\n"
        
        if accepted and (length < 8 or len(issues) > 0):
            weak_passwords.append(result)
            poc_examples.append(f"curl \"{CSRF_URL}?password_new={password}&password_conf={password}&Change=Change\"")
    
    findings_text += "+----------------+----------------------+--------+----------------------+----------------------+\n\n"
    
    # Add detailed issues
    findings_text += "Detailed Issues Found:\n"
    for result in test_results:
        if result.get('issues') and result.get('accepted'):
            findings_text += f"  Password '{result['password']}': {', '.join(result['issues'])}\n"
    findings_text += "\n"
    
    # Generate report
    if weak_passwords:
        result = "Failed"
        
        if poc_examples:
            poc = "\n".join(poc_examples[:3])  # Show first 3 examples
        else:
            poc = f"# Example of weak password acceptance:\ncurl \"{CSRF_URL}?password_new=123&password_conf=123&Change=Change\""
        
        recommendations = """
The application has weak password policy enforcement that must be addressed:

1. Enforce minimum password length of at least 8 characters.
2. Require at least 3 of the following 4 character types:
   - Uppercase letters (A-Z)
   - Lowercase letters (a-z)
   - Numbers (0-9)
   - Special characters (!@#$%^&* etc.)

3. Block commonly used weak passwords:
   - password, 123456, admin, letmein, welcome, etc.
   - Use a comprehensive deny list of known weak passwords

4. Implement password history to prevent reuse:
   - Store last 5-10 passwords
   - Prevent users from reusing recent passwords

5. Consider implementing password expiration:
   - Require password changes every 60-90 days
   - Provide advance warnings before expiration

6. Provide clear, user-friendly password strength feedback:
   - Real-time strength meter during password creation
   - Specific guidance on how to improve password strength

7. Follow NIST guidelines for password policies:
   - Allow long passwords (up to 64 characters)
   - Do not require frequent mandatory changes unless compromised
   - Do not impose arbitrary composition rules that reduce usability

8. Implement rate limiting on password change attempts to prevent abuse.
"""
    else:
        result = "Passed"
        findings_text += "Password policy appears to be adequately enforced.\n"
        findings_text += "All weak passwords were properly rejected.\n"
        poc = "No weak passwords were accepted during testing."
        
        recommendations = """
The application demonstrates good password policy enforcement. However, continue to:

1. Regularly review and update password policies based on current security best practices.
2. Monitor for new commonly compromised passwords and update deny lists.
3. Educate users about creating strong, unique passwords.
4. Consider implementing multi-factor authentication for additional security.
5. Conduct periodic security assessments of authentication mechanisms.
6. Stay updated with NIST and OWASP password guidelines.
7. Implement proper logging and monitoring of password-related activities.
8. Consider passwordless authentication options where appropriate.
"""

    generate_html_report(result, findings_text, poc, recommendations)
    print("[+] Test completed.")

if __name__ == "__main__":
    main()